<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.6 -->

<plugin>
  <name>JDO TCK Execution Maven Mojo</name>
  <description>The Java Data Objects (JDO) API is a standard interface-based Java model abstraction of persistence, developed as Java Specification Requests (JSR 12 and 243) under the auspices of the Java Community Process.</description>
  <groupId>org.apache.jdo</groupId>
  <artifactId>jdo-exectck</artifactId>
  <version>3.2.1</version>
  <goalPrefix>jdo-exectck</goalPrefix>
  <mojos>
    <mojo>
      <goal>enhance</goal>
      <description>Goal that enhances test classes for testing a JDO implementation.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.apache.jdo.exectck.Enhance</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>buildDirectory</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>Location of TCK generated output.</description>
        </parameter>
        <parameter>
          <name>cfgList</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of configuration files, each describing a test configuration. Allows command line override of configured cfgs value.</description>
        </parameter>
        <parameter>
          <name>cfgs</name>
          <type>java.util.Collection</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of configuration files, each describing a test configuration. Note: Collection can only be configured in pom.xml. Using multi-valued type because long String cannot be broken across lines in pom.xml.</description>
        </parameter>
        <parameter>
          <name>confDirectory</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>Location of the configuration directory.</description>
        </parameter>
        <parameter>
          <name>dblist</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>List of databases to run tests under. Currently only derby is supported.</description>
        </parameter>
        <parameter>
          <name>dependencyClasspath</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>Classpath including the dependencies using : as separator between entries.</description>
        </parameter>
        <parameter>
          <name>doEnhance</name>
          <type>boolean</type>
          <required>true</required>
          <editable>true</editable>
          <description>Location of TCK generated output.</description>
        </parameter>
        <parameter>
          <name>identitytypes</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>List of identity types to be tested.</description>
        </parameter>
        <parameter>
          <name>impl</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>Implementation to be tested (jdori or iut). Any value other than &apos;jdori&apos; will test an appropriately configured IUT</description>
        </parameter>
        <parameter>
          <name>implLogFile</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>Location of implementation log file.</description>
        </parameter>
        <parameter>
          <name>logsDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Location of the logs directory.</description>
        </parameter>
        <parameter>
          <name>sqlDirectory</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>Location of the configuration directory.</description>
        </parameter>
        <parameter>
          <name>srcDirectory</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>Root of the TCK source installation.</description>
        </parameter>
      </parameters>
      <configuration>
        <buildDirectory implementation="java.lang.String" default-value="${basedir}/target">${project.build.directory}</buildDirectory>
        <cfgList implementation="java.lang.String">${jdo.tck.cfglist}</cfgList>
        <confDirectory implementation="java.lang.String" default-value="${basedir}/src/main/resources/conf">${project.conf.directory}</confDirectory>
        <dblist implementation="java.lang.String" default-value="derby">${jdo.tck.dblist}</dblist>
        <dependencyClasspath implementation="java.lang.String" default-value="">${jdo.tck.dependencyClasspath}</dependencyClasspath>
        <doEnhance implementation="boolean" default-value="true">${jdo.tck.doEnhance}</doEnhance>
        <identitytypes implementation="java.lang.String" default-value="applicationidentity datastoreidentity">${jdo.tck.identitytypes}</identitytypes>
        <impl implementation="java.lang.String" default-value="jdori">${jdo.tck.impl}</impl>
        <implLogFile implementation="java.lang.String" default-value="${user.dir}/datanucleus.txt">${jdo.tck.impl.logfile}</implLogFile>
        <logsDirectory implementation="java.io.File" default-value="${project.build.directory}/logs">${project.log.directory}</logsDirectory>
        <sqlDirectory implementation="java.lang.String" default-value="${basedir}/src/main/resources/sql">${project.sql.directory}</sqlDirectory>
        <srcDirectory implementation="java.lang.String" default-value="${basedir}/src/main/resources">${project.src.directory}</srcDirectory>
      </configuration>
    </mojo>
    <mojo>
      <goal>help</goal>
      <description>Goal that displays help text for the exectck Maven plugin.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.apache.jdo.exectck.Help</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters/>
    </mojo>
    <mojo>
      <goal>installSchema</goal>
      <description>Goal that installs a database schema for testing a JDO implementation.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.apache.jdo.exectck.InstallSchema</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>buildDirectory</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>Location of TCK generated output.</description>
        </parameter>
        <parameter>
          <name>cfgList</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of configuration files, each describing a test configuration. Allows command line override of configured cfgs value.</description>
        </parameter>
        <parameter>
          <name>cfgs</name>
          <type>java.util.Collection</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of configuration files, each describing a test configuration. Note: Collection can only be configured in pom.xml. Using multi-valued type because long String cannot be broken across lines in pom.xml.</description>
        </parameter>
        <parameter>
          <name>confDirectory</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>Location of the configuration directory.</description>
        </parameter>
        <parameter>
          <name>dblist</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>List of databases to run tests under. Currently only derby is supported.</description>
        </parameter>
        <parameter>
          <name>dependencyClasspath</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>Classpath including the dependencies using : as separator between entries.</description>
        </parameter>
        <parameter>
          <name>doInstallSchema</name>
          <type>boolean</type>
          <required>true</required>
          <editable>true</editable>
          <description>Location of TCK generated output.</description>
        </parameter>
        <parameter>
          <name>identitytypes</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>List of identity types to be tested.</description>
        </parameter>
        <parameter>
          <name>impl</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>Implementation to be tested (jdori or iut). Any value other than &apos;jdori&apos; will test an appropriately configured IUT</description>
        </parameter>
        <parameter>
          <name>implLogFile</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>Location of implementation log file.</description>
        </parameter>
        <parameter>
          <name>logsDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Location of the logs directory.</description>
        </parameter>
        <parameter>
          <name>sqlDirectory</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>Location of the configuration directory.</description>
        </parameter>
      </parameters>
      <configuration>
        <buildDirectory implementation="java.lang.String" default-value="${basedir}/target">${project.build.directory}</buildDirectory>
        <cfgList implementation="java.lang.String">${jdo.tck.cfglist}</cfgList>
        <confDirectory implementation="java.lang.String" default-value="${basedir}/src/main/resources/conf">${project.conf.directory}</confDirectory>
        <dblist implementation="java.lang.String" default-value="derby">${jdo.tck.dblist}</dblist>
        <dependencyClasspath implementation="java.lang.String" default-value="">${jdo.tck.dependencyClasspath}</dependencyClasspath>
        <doInstallSchema implementation="boolean" default-value="true">${jdo.tck.doInstallSchema}</doInstallSchema>
        <identitytypes implementation="java.lang.String" default-value="applicationidentity datastoreidentity">${jdo.tck.identitytypes}</identitytypes>
        <impl implementation="java.lang.String" default-value="jdori">${jdo.tck.impl}</impl>
        <implLogFile implementation="java.lang.String" default-value="${user.dir}/datanucleus.txt">${jdo.tck.impl.logfile}</implLogFile>
        <logsDirectory implementation="java.io.File" default-value="${project.build.directory}/logs">${project.log.directory}</logsDirectory>
        <sqlDirectory implementation="java.lang.String" default-value="${basedir}/src/main/resources/sql">${project.sql.directory}</sqlDirectory>
      </configuration>
    </mojo>
    <mojo>
      <goal>runtck</goal>
      <description>Goal that runs the JDO TCK against the Reference Implementation (RI) or an implementation under test (IUT).</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.apache.jdo.exectck.RunTCK</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>buildDirectory</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>Location of TCK generated output.</description>
        </parameter>
        <parameter>
          <name>cfgList</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of configuration files, each describing a test configuration. Allows command line override of configured cfgs value.</description>
        </parameter>
        <parameter>
          <name>cfgs</name>
          <type>java.util.Collection</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of configuration files, each describing a test configuration. Note: Collection can only be configured in pom.xml. Using multi-valued type because long String cannot be broken across lines in pom.xml.</description>
        </parameter>
        <parameter>
          <name>cleanupaftertest</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>To retain test output for debugging, set to false.</description>
        </parameter>
        <parameter>
          <name>confDirectory</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>Location of the configuration directory.</description>
        </parameter>
        <parameter>
          <name>dblist</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>List of databases to run tests under. Currently only derby is supported.</description>
        </parameter>
        <parameter>
          <name>dbproperties</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Properties to use in accessing database.</description>
        </parameter>
        <parameter>
          <name>debugDirectives</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>User-supplied arguments for debug directives.</description>
        </parameter>
        <parameter>
          <name>debugTCK</name>
          <type>boolean</type>
          <required>true</required>
          <editable>true</editable>
          <description>Run the TCK in a debugger.</description>
        </parameter>
        <parameter>
          <name>dependencyClasspath</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>Classpath including the dependencies using : as separator between entries.</description>
        </parameter>
        <parameter>
          <name>doRunTCK</name>
          <type>boolean</type>
          <required>true</required>
          <editable>true</editable>
          <description>To skip running of TCK, set to false.</description>
        </parameter>
        <parameter>
          <name>exclude</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>Name of file in src/conf containing property jdo.tck.exclude, whose value is a list of files to be excluded from testing.</description>
        </parameter>
        <parameter>
          <name>extLibsDirectory</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>Location of third party libraries such as JNDI.</description>
        </parameter>
        <parameter>
          <name>identitytypes</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>List of identity types to be tested.</description>
        </parameter>
        <parameter>
          <name>impl</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>Implementation to be tested (jdori or iut). Any value other than &apos;jdori&apos; will test an appropriately configured IUT</description>
        </parameter>
        <parameter>
          <name>implLogFile</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>Location of implementation log file.</description>
        </parameter>
        <parameter>
          <name>jvmproperties</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>JVM properties.</description>
        </parameter>
        <parameter>
          <name>logsDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Location of the logs directory.</description>
        </parameter>
        <parameter>
          <name>onFailure</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>Define handling of TCK failures.</description>
        </parameter>
        <parameter>
          <name>pmfProperties</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Name of file in src/conf containing pmf properties.</description>
        </parameter>
        <parameter>
          <name>resultPrinterClass</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>Class used to output test result and configuration information.</description>
        </parameter>
        <parameter>
          <name>runtckVerbose</name>
          <type>boolean</type>
          <required>true</required>
          <editable>true</editable>
          <description>To run the RunTCK plugin goal in verbose mode.</description>
        </parameter>
        <parameter>
          <name>signaturefile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Properties to use in accessing database.</description>
        </parameter>
        <parameter>
          <name>skipJndi</name>
          <type>boolean</type>
          <required>true</required>
          <editable>true</editable>
          <description>To skip jndi PMF Tests set to true.</description>
        </parameter>
        <parameter>
          <name>sqlDirectory</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>Location of the configuration directory.</description>
        </parameter>
        <parameter>
          <name>testRunnerClass</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>Class used to run a batch of tests.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Run the TCK tests in verbose mode.</description>
        </parameter>
      </parameters>
      <configuration>
        <buildDirectory implementation="java.lang.String" default-value="${basedir}/target">${project.build.directory}</buildDirectory>
        <cfgList implementation="java.lang.String">${jdo.tck.cfglist}</cfgList>
        <cleanupaftertest implementation="java.lang.String" default-value="true">${jdo.tck.cleanupaftertest}</cleanupaftertest>
        <confDirectory implementation="java.lang.String" default-value="${basedir}/src/main/resources/conf">${project.conf.directory}</confDirectory>
        <dblist implementation="java.lang.String" default-value="derby">${jdo.tck.dblist}</dblist>
        <dbproperties implementation="java.lang.String" default-value="-Dderby.system.home=${basedir}/target/database/derby">${database.runtck.sysproperties}</dbproperties>
        <debugDirectives implementation="java.lang.String" default-value="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=${jdo.tck.debug.port}">${jdo.tck.debug.jvmargs}</debugDirectives>
        <debugTCK implementation="boolean" default-value="false">${jdo.tck.debugTCK}</debugTCK>
        <dependencyClasspath implementation="java.lang.String" default-value="">${jdo.tck.dependencyClasspath}</dependencyClasspath>
        <doRunTCK implementation="boolean" default-value="true">${jdo.tck.doRunTCK}</doRunTCK>
        <exclude implementation="java.lang.String" default-value="exclude.list">${jdo.tck.excludefile}</exclude>
        <extLibsDirectory implementation="java.lang.String" default-value="${basedir}/../lib/ext">${project.lib.ext.directory}</extLibsDirectory>
        <identitytypes implementation="java.lang.String" default-value="applicationidentity datastoreidentity">${jdo.tck.identitytypes}</identitytypes>
        <impl implementation="java.lang.String" default-value="jdori">${jdo.tck.impl}</impl>
        <implLogFile implementation="java.lang.String" default-value="${user.dir}/datanucleus.txt">${jdo.tck.impl.logfile}</implLogFile>
        <jvmproperties implementation="java.lang.String" default-value="-Xmx512m">${jdo.tck.jvmproperties}</jvmproperties>
        <logsDirectory implementation="java.io.File" default-value="${project.build.directory}/logs">${project.log.directory}</logsDirectory>
        <onFailure implementation="java.lang.String" default-value="failGoal">${jdo.tck.onFailure}</onFailure>
        <pmfProperties implementation="java.lang.String" default-value="jdori-pmf.properties">${jdo.tck.pmfproperties}</pmfProperties>
        <resultPrinterClass implementation="java.lang.String" default-value="org.apache.jdo.tck.util.BatchResultPrinter">${jdo.tck.resultprinterclass}</resultPrinterClass>
        <runtckVerbose implementation="boolean" default-value="false">${jdo.tck.runTCKVerbose}</runtckVerbose>
        <signaturefile implementation="java.lang.String" default-value="${basedir}/src/main/resources/conf/jdo-signatures.txt">${jdo.tck.signaturefile}</signaturefile>
        <skipJndi implementation="boolean" default-value="false">${jdo.tck.skipJndi}</skipJndi>
        <sqlDirectory implementation="java.lang.String" default-value="${basedir}/src/main/resources/sql">${project.sql.directory}</sqlDirectory>
        <testRunnerClass implementation="java.lang.String" default-value="org.apache.jdo.tck.util.BatchTestRunner">${jdo.tck.testrunnerclass}</testRunnerClass>
        <verbose implementation="java.lang.String" default-value="false">${jdo.tck.verbose}</verbose>
      </configuration>
    </mojo>
  </mojos>
</plugin>